{"version":3,"sources":["utils/index.js","App.js","serviceWorker.js","index.js"],"names":["GetDistance","lat1","lng1","lat2","lng2","radLat1","Math","PI","radLat2","a","b","s","asin","sqrt","pow","sin","cos","round","geolocation","qq","maps","Geolocation","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getHour","now","Date","setState","hour","getMinutes","getHours","getLoca","getLocation","payload","loca_lat","lat","loca_lng","lng","getIssPosition","fetch","then","res","json","data","iss_lat","iss_position","latitude","iss_lng","longitude","distance","state","screenfullSwitch","screenfull","enabled","toggle","refs","alert","_this2","background_timer","setInterval","getIssPosition_timer","react_default","createElement","className","concat","join","ref","onDoubleClick","clearInterval","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAAaA,SAAc,SAACC,EAAMC,EAAMC,EAAMC,GAC1C,IAAIC,EAAWJ,EAAOK,KAAKC,GAAM,IAC7BC,EAAWL,EAAOG,KAAKC,GAAM,IAC7BE,EAAIJ,EAAUG,EACdE,EAAKR,EAAOI,KAAKC,GAAM,IAASH,EAAOE,KAAKC,GAAM,IAClDI,EACA,EACAL,KAAKM,KACDN,KAAKO,KACDP,KAAKQ,IAAIR,KAAKS,IAAIN,EAAI,GAAI,GAC1BH,KAAKU,IAAIX,GAAWC,KAAKU,IAAIR,GAAWF,KAAKQ,IAAIR,KAAKS,IAAIL,EAAI,GAAI,KAK9E,OAFAC,GAAQ,SACRA,EAAIL,KAAKW,MAAU,IAAJN,GAAa,MCR1BO,EAAc,IAAIC,GAAGC,KAAKC,YAC9B,sCACA,qBAwFaC,cApFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAqBRQ,QAAU,WACR,IAAIC,EAAM,IAAIC,KACdT,EAAKU,SAAS,CACZC,KAAMH,EAAII,aAAe,GAAKJ,EAAIK,WAAa,EAAIL,EAAIK,cAzBxCb,EA4BnBc,QAAU,WACRpB,EAAYqB,YAAY,SAAAC,GACtBhB,EAAKU,SAAS,CACZO,SAAUD,EAAQE,IAClBC,SAAUH,EAAQI,SAhCLpB,EAoCnBqB,eAAiB,WACfC,MAAM,2CAA2CC,KAAK,SAAAC,GACpDA,EAAIC,OAAOF,KAAK,SAAAG,GACd1B,EAAKU,SACH,CACEiB,QAASD,EAAKE,aAAaC,SAC3BC,QAASJ,EAAKE,aAAaG,WAE7B,WACE/B,EAAKU,SACH,CACEsB,SAAUxD,EACRwB,EAAKiC,MAAMhB,SACXjB,EAAKiC,MAAMd,SACXnB,EAAKiC,MAAMN,QACX3B,EAAKiC,MAAMH,kBAnDR9B,EA4DnBkC,iBAAmB,WACbC,IAAWC,QACbD,IAAWE,OAAOrC,EAAKsC,KAAKxC,KAE5ByC,MAAM,sBA9DRvC,EAAKiC,MAAQ,CACXtB,KAAM,EACNM,SAAU,EACVE,SAAU,EACVQ,QAAS,EACTG,QAAS,EACTE,SAAU,IARKhC,mFAWC,IAAAwC,EAAArC,KAClBA,KAAKI,UACLJ,KAAKW,UACLX,KAAKkB,iBACLlB,KAAKsC,iBAAmBC,YAAY,WAClCF,EAAKjC,WACJ,MACHJ,KAAKwC,qBAAuBD,YAAY,WACtCF,EAAKnB,kBACJ,sCAgDH,OACEuB,EAAA3D,EAAA4D,cAAA,OAAKC,UAAW,CAAC,MAAD,gBAAAC,OAAwB5C,KAAK8B,MAAMtB,OAAQqC,KAAK,KAAMC,IAAI,OACxEL,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,YAAYI,cAAe/C,KAAK+B,kBAC7CU,EAAA3D,EAAA4D,cAAA,UACG1C,KAAK8B,MAAMD,2DAOpB7B,KAAKsC,kBAAoBU,cAAchD,KAAKsC,kBAC5CtC,KAAKwC,sBAAwBQ,cAAchD,KAAKwC,6BAjFlCS,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAA3D,EAAA4D,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.eb4368b2.chunk.js","sourcesContent":["export const GetDistance = (lat1, lng1, lat2, lng2) => {\n    var radLat1 = (lat1 * Math.PI) / 180.0;\n    var radLat2 = (lat2 * Math.PI) / 180.0;\n    var a = radLat1 - radLat2;\n    var b = (lng1 * Math.PI) / 180.0 - (lng2 * Math.PI) / 180.0;\n    var s =\n        2 *\n        Math.asin(\n            Math.sqrt(\n                Math.pow(Math.sin(a / 2), 2) +\n                Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)\n            )\n        );\n    s = s * 6378.137; // EARTH_RADIUS;\n    s = Math.round(s * 10000) / 10000;\n    return s;\n};","import React, { Component } from \"react\";\nimport screenfull from \"screenfull\";\nimport \"./App.css\";\nimport { GetDistance } from \"./utils\";\n\n// eslint-disable-next-line\nconst geolocation = new qq.maps.Geolocation(\n  \"MPFBZ-TPZW4-AWOU3-XG2RL-3VE47-MSFIE\",\n  \"Outer Space Radio\"\n);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hour: 0,\n      loca_lat: 0,\n      loca_lng: 0,\n      iss_lat: 0,\n      iss_lng: 0,\n      distance: ''\n    };\n  }\n  componentDidMount() {\n    this.getHour();\n    this.getLoca();\n    this.getIssPosition();\n    this.background_timer = setInterval(() => {\n      this.getHour();\n    }, 1000 * 60 * 60);\n    this.getIssPosition_timer = setInterval(() => {\n      this.getIssPosition();\n    }, 1000);\n  }\n  getHour = () => {\n    let now = new Date();\n    this.setState({\n      hour: now.getMinutes() > 50 ? now.getHours() + 1 : now.getHours()\n    });\n  };\n  getLoca = () => {\n    geolocation.getLocation(payload => {\n      this.setState({\n        loca_lat: payload.lat,\n        loca_lng: payload.lng\n      });\n    });\n  };\n  getIssPosition = () => {\n    fetch(\"http://api.open-notify.org/iss-now.json\").then(res => {\n      res.json().then(data => {\n        this.setState(\n          {\n            iss_lat: data.iss_position.latitude,\n            iss_lng: data.iss_position.longitude\n          },\n          () => {\n            this.setState(\n              {\n                distance: GetDistance(\n                  this.state.loca_lat,\n                  this.state.loca_lng,\n                  this.state.iss_lat,\n                  this.state.iss_lng,\n                )\n              }\n            )\n          }\n        );\n      });\n    });\n  };\n  screenfullSwitch = () => {\n    if (screenfull.enabled) {\n      screenfull.toggle(this.refs.App);\n    } else {\n      alert(\"screen full error\");\n    }\n  };\n  render() {\n    return (\n      <div className={[\"App\", `sky-gradient-${this.state.hour}`].join(\" \")} ref=\"App\">\n        <div className=\"container\" onDoubleClick={this.screenfullSwitch}>\n          <h1>\n            {this.state.distance}\n          </h1>\n        </div>\n      </div>\n    );\n  }\n  componentWillUnmount() {\n    this.background_timer && clearInterval(this.background_timer);\n    this.getIssPosition_timer && clearInterval(this.getIssPosition_timer);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}